/*
 * Tenzing Microservice
 * Tenzing is a Bosch SoftTec microservice for storing, managing and distributing user trips.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: BSOT_PJ-SC3_Cloud-CF@de.bosch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bosch.softtec.micro.tenzing.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * SearchContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-06T13:30:17.808+01:00[Europe/Berlin]")
public class SearchContext {
  public static final String SERIALIZED_NAME_STARTS = "starts";
  @SerializedName(SERIALIZED_NAME_STARTS)
  private OneOfBBoxCircle starts = null;

  public static final String SERIALIZED_NAME_ENDS = "ends";
  @SerializedName(SERIALIZED_NAME_ENDS)
  private OneOfBBoxCircle ends = null;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private OneOfBBoxCircle local = null;


  public SearchContext starts(OneOfBBoxCircle starts) {

    this.starts = starts;
    return this;
  }

   /**
   * Get starts
   * @return starts
  **/
  @ApiModelProperty(required = true, value = "")

  public OneOfBBoxCircle getStarts() {
    return starts;
  }


  public void setStarts(OneOfBBoxCircle starts) {
    this.starts = starts;
  }


  public SearchContext ends(OneOfBBoxCircle ends) {

    this.ends = ends;
    return this;
  }

   /**
   * Get ends
   * @return ends
  **/
  @ApiModelProperty(required = true, value = "")

  public OneOfBBoxCircle getEnds() {
    return ends;
  }


  public void setEnds(OneOfBBoxCircle ends) {
    this.ends = ends;
  }


  public SearchContext query(String query) {

    this.query = query;
    return this;
  }

   /**
   * A search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity.
   * @return query
  **/
  @ApiModelProperty(example = "(Forest OR Picnic) Lake -Mountain set:caseSensitive", required = true, value = "A search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity.")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  public SearchContext local(OneOfBBoxCircle local) {

    this.local = local;
    return this;
  }

   /**
   * Get local
   * @return local
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OneOfBBoxCircle getLocal() {
    return local;
  }


  public void setLocal(OneOfBBoxCircle local) {
    this.local = local;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchContext searchContext = (SearchContext) o;
    return Objects.equals(this.starts, searchContext.starts) &&
        Objects.equals(this.ends, searchContext.ends) &&
        Objects.equals(this.query, searchContext.query) &&
        Objects.equals(this.local, searchContext.local);
  }

  @Override
  public int hashCode() {
    return Objects.hash(starts, ends, query, local);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchContext {\n");
    sb.append("    starts: ").append(toIndentedString(starts)).append("\n");
    sb.append("    ends: ").append(toIndentedString(ends)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

