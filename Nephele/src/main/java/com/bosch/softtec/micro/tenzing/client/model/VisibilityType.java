/*
 * Tenzing Microservice
 * Tenzing is a Bosch SoftTec microservice for storing, managing and distributing user trips.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: BSOT_PJ-SC3_Cloud-CF@de.bosch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bosch.softtec.micro.tenzing.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

/**
 * Set the visibility of the trip:  * &#x60;PRIVATE&#x60; - The trip is only visible to the owner itself  * &#x60;SHARED&#x60;  - The trip is only visible to the owner and his/her friends  * &#x60;PUBLIC&#x60;  - The trip is publicly available and each user can view but not modify it
 */
@JsonAdapter(VisibilityType.Adapter.class)
public enum VisibilityType {

  PRIVATE("PRIVATE"),

  SHARED("SHARED"),

  PUBLIC("PUBLIC");

  private String value;

  VisibilityType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static VisibilityType fromValue(String value) {
    for (VisibilityType b : VisibilityType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<VisibilityType> {
    @Override
    public void write(final JsonWriter jsonWriter, final VisibilityType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public VisibilityType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return VisibilityType.fromValue(value);
    }
  }
}

