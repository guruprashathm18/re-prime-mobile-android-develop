/*
 * Tenzing Microservice
 * Tenzing is a Bosch SoftTec microservice for storing, managing and distributing user trips.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: BSOT_PJ-SC3_Cloud-CF@de.bosch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bosch.softtec.micro.tenzing.client.model;

import com.google.gson.annotations.SerializedName;

import java.math.BigDecimal;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Holds the parameters to share a trip.
 */
@ApiModel(description = "Holds the parameters to share a trip.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-06T13:30:17.808+01:00[Europe/Berlin]")
public class ShareTicketBody {
  public static final String SERIALIZED_NAME_TRIP_ID = "tripId";
  @SerializedName(SERIALIZED_NAME_TRIP_ID)
  private String tripId;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private BigDecimal expiry;


  public ShareTicketBody tripId(String tripId) {

    this.tripId = tripId;
    return this;
  }

   /**
   * The trip ID (database).
   * @return tripId
  **/
  @ApiModelProperty(example = "5dd3f795bd1ff331eaf8f5c3", required = true, value = "The trip ID (database).")

  public String getTripId() {
    return tripId;
  }


  public void setTripId(String tripId) {
    this.tripId = tripId;
  }


  public ShareTicketBody expiry(BigDecimal expiry) {

    this.expiry = expiry;
    return this;
  }

   /**
   * The expiration time of the ticket to share a trip. Minimum is 1 hour, Maximum is 30 days. If no expiry time is set, a default of 4 days is used.
   * minimum: 3600
   * maximum: 2592000
   * @return expiry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "345600", value = "The expiration time of the ticket to share a trip. Minimum is 1 hour, Maximum is 30 days. If no expiry time is set, a default of 4 days is used.")

  public BigDecimal getExpiry() {
    return expiry;
  }


  public void setExpiry(BigDecimal expiry) {
    this.expiry = expiry;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareTicketBody shareTicketBody = (ShareTicketBody) o;
    return Objects.equals(this.tripId, shareTicketBody.tripId) &&
        Objects.equals(this.expiry, shareTicketBody.expiry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tripId, expiry);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareTicketBody {\n");
    sb.append("    tripId: ").append(toIndentedString(tripId)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

