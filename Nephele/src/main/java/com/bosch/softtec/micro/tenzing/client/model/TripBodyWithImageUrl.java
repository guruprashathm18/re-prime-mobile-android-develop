/*
 * Tenzing Microservice
 * Tenzing is a Bosch SoftTec microservice for storing, managing and distributing user trips.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: BSOT_PJ-SC3_Cloud-CF@de.bosch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bosch.softtec.micro.tenzing.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Represents the (body) data of an user trip without server-side metadata but with images.
 */
@ApiModel(description = "Represents the (body) data of an user trip without server-side metadata but with images.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-06T13:30:17.808+01:00[Europe/Berlin]")
public class TripBodyWithImageUrl extends TripBody {
    public static final String SERIALIZED_NAME_IMAGES = "images";
    @SerializedName(SERIALIZED_NAME_IMAGES)
    private List<String> imageUrls = new ArrayList<String>();

    public TripBodyWithImageUrl images(List<String> imageUrls) {

        this.imageUrls = imageUrls;
        return this;
    }

    public TripBodyWithImageUrl addImageUrlItem(String imageUrl) {
        final boolean isEmpty = imageUrl.isEmpty();
        if (isEmpty) return this;

        this.imageUrls.add(imageUrl);
        return this;
    }

    @Override
    public TripBodyWithImageUrl visibility(VisibilityType visibility) {
        return (TripBodyWithImageUrl) super.visibility(visibility);
    }

    @Override
    public TripBodyWithImageUrl name(String name) {
        return (TripBodyWithImageUrl) super.name(name);
    }

    @Override
    public TripBodyWithImageUrl description(String description) {
        return (TripBodyWithImageUrl) super.description(description);
    }

    @Override
    public TripBodyWithImageUrl track(List<GpsPoint> track) {
        return (TripBodyWithImageUrl) super.track(track);
    }

    @Override
    public TripBodyWithImageUrl addTrackItem(GpsPoint trackItem) {
        return (TripBodyWithImageUrl) super.addTrackItem(trackItem);
    }

    @Override
    public TripBodyWithImageUrl directions(List<GpsPoint> directions) {
        return (TripBodyWithImageUrl) super.directions(directions);
    }

    @Override
    public TripBodyWithImageUrl addDirectionsItem(GpsPoint directionsItem) {
        return (TripBodyWithImageUrl) super.addDirectionsItem(directionsItem);
    }

    /**
     * A list of all image resources related to this trip. May contain up to 5 images.
     *
     * @return images
     **/
    @ApiModelProperty(required = true, value = "A list of all image resources related to this trip.")
    public List<String> getImageUrls() {
        return imageUrls;
    }


    public void setImagesUrls(List<String> imageUrls) {
        this.imageUrls = imageUrls;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        TripBodyWithImageUrl tripBodyWithImage = (TripBodyWithImageUrl) o;
        return super.equals(o) && Objects.equals(this.imageUrls, tripBodyWithImage.imageUrls);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), imageUrls);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TripBodyWithImage {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    images: ").append(toIndentedString(imageUrls)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

